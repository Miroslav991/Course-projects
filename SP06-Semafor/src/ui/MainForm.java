package ui;

import domain.Semafor;
import domain.Signal;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ImageIcon;
import java.util.Timer;
import java.util.TimerTask;
import observer.ObserveLight;
import ui.light.LightFactory;

/**
 *
 * @author Miroslav Kolo≈°njaji
 */
public class MainForm extends javax.swing.JFrame implements ObserveLight{

    Timer timer;
    TimerTask task;
    /**
     * Creates new form MainForm
     */
    private Semafor semafor;

    public MainForm() {
        semafor = Semafor.getInstance();
        timer = new Timer();
        initComponents();
        semafor.addObserver(this);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblSemaforImage = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnTurnOnOff = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblSemaforImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/Semafor-UGASEN.png"))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Simple semafor application");

        btnTurnOnOff.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnTurnOnOff.setText("Turn On");
        btnTurnOnOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTurnOnOffActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(123, 123, 123)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(lblSemaforImage, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(btnTurnOnOff, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel2)
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblSemaforImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnTurnOnOff)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void setLightStartPosition(Signal signalSet) {
        if (semafor.isUkljucen()) {
            semafor.setSignal(signalSet);
            
        }

    }

    public void getLight() {
        LightFactory.getInstance().light(lblSemaforImage);
    }


    private void btnTurnOnOffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTurnOnOffActionPerformed

        String button = btnTurnOnOff.getText().trim();

        if (!(button.equals("Turn Off"))) {

            btnTurnOnOff.setText("Turn Off");
            semafor.setUkljucen(true);
            setLightStartPosition(null);  // ako je null - postavlja pocetni status na CRVENO
            System.out.print("Start - ");
            automat();
        } else {
            btnTurnOnOff.setText("Turn On");
            semafor.setUkljucen(false);
            task.cancel();
        }
    }//GEN-LAST:event_btnTurnOnOffActionPerformed

    private void automat() {
        if (semafor.isUkljucen()) {

            timer = new Timer();
            task = new TimerTask() {
           
                @Override
                public void run() {
                    semafor.changeColor();
                    System.out.println(semafor.toString());
                    
                }
            };
            timer.scheduleAtFixedRate(task, 0, 4000);
        }

    }
    
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnTurnOnOff;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lblSemaforImage;
    // End of variables declaration//GEN-END:variables

    @Override
    public void updateStatus() {
        getLight();
    }

}
